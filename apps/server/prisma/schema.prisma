// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// Looking for ways to speed up your queries, or scale easily with your serverless or edge functions?
// Try Prisma Accelerate: https://pris.ly/cli/accelerate-init

datasource db {
  provider = "mongodb"
  url      = env("DATABASE_URL")
}

generator client {
  provider = "prisma-client-js"
}

model User {
  id        String  @id @default(auto()) @map("_id") @db.ObjectId
  firstname String?
  lastname  String?
  email     String? @unique
  password  String
  phone_number: String
  bio: String
  instrument: String
}

model Ensemble {
  id             String   @id @default(auto()) @map("_id") @db.ObjectId
  name           String
  musicians      Int[]   
  description    String?
  location       Json    
  hosts          String[] 
  open_positions String[] 
  is_active      Boolean  
  members        User[]   @relation(fields: [memberIds], references: [id])
  member_ids     String[]
}

model Post {
  id          String   @id @default(auto()) @map("_id") @db.ObjectId
  ensemble    Ensemble @relation(fields: [ensembleId], references: [id])
  ensemble_id String
  title       String
  description String
  website     String
  type        PostType 
  author      User     @relation(fields: [authorId], references: [id])
  author_id   String
  createdAt   DateTime @default(now())
}

model Match {
  id               String   @id @default(auto()) @map("_id") @db.ObjectId
  searching_user   User     @relation("User1Matches", fields: [searching_user_id], references: [id])
  searching_user_id String
  matched_user     User     @relation("User2Matches", fields: [matched_user_id], references: [id])
  matched_user_id  String
  matchedAt        DateTime @default(now())
  match_status     MatchStatus 
}

enum PostType {
  recruitment
  event
}

enum MatchStatus {
  new
  messaged
  joined
}